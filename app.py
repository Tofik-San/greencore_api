from fastapi import FastAPI, Depends, Header, HTTPException, Query
from fastapi.middleware.cors import CORSMiddleware
from sqlalchemy import create_engine, text
from dotenv import load_dotenv
import os
from typing import Optional
from fastapi.openapi.utils import get_openapi

load_dotenv()

API_KEY = os.getenv("API_KEY")
DATABASE_URL = os.getenv("DATABASE_URL")

app = FastAPI()

# üåê CORS (–æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –ø–æ–∑–∂–µ –Ω–∞ –ø—Ä–æ–¥)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –Ω–∞ —Ä–µ–ª–∏–∑–µ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–æ–º–µ–Ω
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
engine = create_engine(DATABASE_URL)

# üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ API-–∫–ª—é—á–∞
def verify_api_key(x_api_key: Optional[str] = Header(None)):
    if x_api_key != API_KEY:
        raise HTTPException(status_code=403, detail="Forbidden: Invalid API Key")

# üåø –û—Å–Ω–æ–≤–Ω–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç
@app.get("/plants", dependencies=[Depends(verify_api_key)])
def get_plants(
    view: Optional[str] = Query(None, description="–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–∞"),
    light: Optional[str] = Query(
        None,
        enum=["—Ç–µ–Ω—å", "–ø–æ–ª—É—Ç–µ–Ω—å", "—è—Ä–∫–∏–π"],
        description="–û—Å–≤–µ—â–µ–Ω–∏–µ: —Ç–µ–Ω—å | –ø–æ–ª—É—Ç–µ–Ω—å | —è—Ä–∫–∏–π"
    ),
    beginner_friendly: Optional[str] = Query(
        None,
        enum=["–¥–∞", "–Ω–µ—Ç"],
        description="–ü–æ–¥—Ö–æ–¥–∏—Ç –Ω–æ–≤–∏—á–∫–∞–º: –¥–∞ | –Ω–µ—Ç"
    ),
    toxicity: Optional[str] = Query(
        None,
        enum=["–Ω–µ—Ç", "—É–º–µ—Ä–µ–Ω–Ω–æ", "—Ç–æ–∫—Å–∏—á–Ω–æ"],
        description="–¢–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å: –Ω–µ—Ç | —É–º–µ—Ä–µ–Ω–Ω–æ | —Ç–æ–∫—Å–∏—á–Ω–æ"
    ),
    temperature: Optional[str] = Query(None, description="–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä 18‚Äì25)"),
    ru_regions: Optional[str] = Query(None, description="–†–µ–≥–∏–æ–Ω—ã –†–§ (RU-MOW|RU-KDA –∏ —Ç.–¥.)"),
    indoor: Optional[str] = Query(
        None,
        enum=["true", "false"],
        description="–ö–æ–º–Ω–∞—Ç–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ: true | false"
    ),
    outdoor: Optional[str] = Query(
        None,
        enum=["true", "false"],
        description="–£–ª–∏—á–Ω–æ–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ: true | false"
    ),
    page: int = Query(1, ge=1),
    limit: int = Query(10, ge=1, le=100)
):
    query = "SELECT * FROM plants WHERE 1=1"
    params = {}

    # üåø View
    if view:
        query += " AND LOWER(view) LIKE :view"
        params["view"] = f"%{view.lower()}%"

    # üí° Light
    if light:
        light_map = {"—Ç–µ–Ω—å": "shade", "–ø–æ–ª—É—Ç–µ–Ω—å": "partial", "—è—Ä–∫–∏–π": "sun"}
        query += " AND LOWER(light) LIKE :light"
        params["light"] = f"%{light_map[light]}%"

    # üå± Beginner friendly
    if beginner_friendly:
        bf_map = {"–¥–∞": True, "–Ω–µ—Ç": False}
        query += " AND beginner_friendly = :bf"
        params["bf"] = bf_map[beginner_friendly]

    # ‚ò†Ô∏è Toxicity
    if toxicity:
        tox_map = {"–Ω–µ—Ç": "none", "—É–º–µ—Ä–µ–Ω–Ω–æ": "mild", "—Ç–æ–∫—Å–∏—á–Ω–æ": "toxic"}
        query += " AND LOWER(toxicity) = :tox"
        params["tox"] = tox_map[toxicity]

    # üå° Temperature
    if temperature:
        query += " AND LOWER(temperature) LIKE :temp"
        params["temp"] = f"%{temperature.lower()}%"

    # üåç Regions
    if ru_regions:
        query += " AND LOWER(ru_regions) LIKE :region"
        params["region"] = f"%{ru_regions.lower()}%"

    # üè° Indoor/Outdoor
    if indoor:
        query += " AND indoor = :indoor"
        params["indoor"] = indoor.lower() == "true"
    if outdoor:
        query += " AND outdoor = :outdoor"
        params["outdoor"] = outdoor.lower() == "true"

    query += " ORDER BY id"
    offset = (page - 1) * limit
    query += " LIMIT :limit OFFSET :offset"
    params["limit"] = limit
    params["offset"] = offset

    with engine.connect() as connection:
        result = connection.execute(text(query), params)
        plants = [dict(row._mapping) for row in result]

    return {
        "count": len(plants),
        "page": page,
        "limit": limit,
        "results": plants
    }

# üîé –î–µ—Ç–∞–ª—å–Ω–∞—è –∫–∞—Ä—Ç–æ—á–∫–∞
@app.get("/plant/{plant_id}", dependencies=[Depends(verify_api_key)])
def get_plant(plant_id: int):
    with engine.connect() as connection:
        result = connection.execute(text("SELECT * FROM plants WHERE id = :id"), {"id": plant_id}).fetchone()
        if not result:
            raise HTTPException(status_code=404, detail="Plant not found")
    return dict(result._mapping)

# üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–∞–∑–µ
@app.get("/stats", dependencies=[Depends(verify_api_key)])
def get_stats():
    with engine.connect() as connection:
        query = """
        SELECT 
            COUNT(*) AS total,
            COUNT(DISTINCT view) AS unique_views,
            COUNT(DISTINCT family) AS unique_families,
            SUM(CASE WHEN toxicity = 'toxic' THEN 1 ELSE 0 END) AS toxic_count,
            SUM(CASE WHEN beginner_friendly = true THEN 1 ELSE 0 END) AS beginner_friendly_count
        FROM plants;
        """
        result = connection.execute(text(query)).fetchone()
    return dict(result._mapping)

# ü©∫ Health-check
@app.get("/health", dependencies=[Depends(verify_api_key)])
def health_check():
    return {"status": "ok"}

# üìò Swagger —Å API-–∫–ª—é—á–æ–º
def custom_openapi():
    if app.openapi_schema:
        return app.openapi_schema

    schema = get_openapi(
        title="GreenCore API",
        version="1.2.0",
        description="API –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–∞–∑–µ —Ä–∞—Å—Ç–µ–Ω–∏–π —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏, –∑–∞—â–∏—Ç–æ–π –ø–æ X-API-Key –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π",
        routes=app.routes,
    )
    schema.setdefault("components", {}).setdefault("securitySchemes", {})
    schema["components"]["securitySchemes"]["APIKeyHeader"] = {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-Key"
    }

    for path in schema["paths"]:
        for method in schema["paths"][path]:
            schema["paths"][path][method]["security"] = [{"APIKeyHeader": []}]

    app.openapi_schema = schema
    return app.openapi_schema

app.openapi = custom_openapi
