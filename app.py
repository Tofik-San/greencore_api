from fastapi import FastAPI, Depends, Header, HTTPException, Query
from fastapi.middleware.cors import CORSMiddleware
from sqlalchemy import create_engine, text
from dotenv import load_dotenv
import os
from typing import Optional, Literal
from fastapi.openapi.utils import get_openapi

load_dotenv()

API_KEY = os.getenv("API_KEY")
DATABASE_URL = os.getenv("DATABASE_URL")

app = FastAPI()

# CORS (–Ω–∞ –ø—Ä–æ–¥–µ –æ–≥—Ä–∞–Ω–∏—á—å –¥–æ–º–µ–Ω–æ–º)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

engine = create_engine(DATABASE_URL)

# üîê API-–∫–ª—é—á
def verify_api_key(x_api_key: Optional[str] = Header(None)):
    if x_api_key != API_KEY:
        raise HTTPException(status_code=403, detail="Forbidden: Invalid API Key")

# üîé –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è temperature –≤ SQL (—É–±–∏—Ä–∞–µ–º ¬∞, c, –ø—Ä–æ–±–µ–ª—ã, –¥–ª–∏–Ω–Ω—ã–µ —Ç–∏—Ä–µ)
def norm_temp_sql(field: str = "temperature") -> str:
    return (
        "LOWER("
        f"REPLACE(REPLACE(REPLACE(REPLACE(REPLACE({field}, '¬∞', ''),'c',''),' ',''),'‚Äì','-'),'‚Äî','-')"
        ")"
    )

# üí° –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è light (—Ä—É—Å/–∞–Ω–≥–ª + –∫–æ—Ä–Ω–∏ —Å–ª–æ–≤)
LIGHT_PATTERNS = {
    "—Ç–µ–Ω—å": [
        "full shade", "shade", "—Ç–µ–Ω—å", "–±–µ–∑ –ø—Ä—è–º–æ–≥–æ", "indirect", "diffused"
    ],
    "–ø–æ–ª—É—Ç–µ–Ω—å": [
        "part shade", "partial", "–ø–æ–ª—É—Ç–µ–Ω—å", "—Ä–∞—Å—Å–µ—è–Ω", "—É—Ç—Ä–µ–Ω–Ω–µ–µ", "–Ω–µ–ø—Ä—è–º"
    ],
    "—è—Ä–∫–∏–π": [
        "full sun", "sun", "–ø—Ä—è–º–æ–µ —Å–æ–ª–Ω—Ü–µ", "—è—Ä–∫–∏–π", "—Å–æ–ª–Ω–µ—á"
    ],
}

@app.get("/plants", dependencies=[Depends(verify_api_key)])
def get_plants(
    view: Optional[str] = Query(None, description="–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∏–¥–∞"),
    light: Optional[Literal["—Ç–µ–Ω—å", "–ø–æ–ª—É—Ç–µ–Ω—å", "—è—Ä–∫–∏–π"]] = Query(
        None, description="–û—Å–≤–µ—â–µ–Ω–∏–µ"
    ),
    beginner_friendly: Optional[Literal["–¥–∞", "–Ω–µ—Ç"]] = Query(
        None, description="–ü–æ–¥—Ö–æ–¥–∏—Ç –Ω–æ–≤–∏—á–∫–∞–º"
    ),
    toxicity: Optional[Literal["–Ω–µ—Ç", "—É–º–µ—Ä–µ–Ω–Ω–æ", "—Ç–æ–∫—Å–∏—á–Ω–æ"]] = Query(
        None, description="–¢–æ–∫—Å–∏—á–Ω–æ—Å—Ç—å"
    ),
    temperature: Optional[str] = Query(None, description="–î–∏–∞–ø–∞–∑–æ–Ω, –Ω–∞–ø—Ä. 18-25"),
    ru_regions: Optional[str] = Query(None, description="RU-MOW|RU-KDA –∏ —Ç.–ø."),
    indoor: Optional[Literal["true", "false"]] = Query(None, description="–ö–æ–º–Ω–∞—Ç–Ω–æ–µ"),
    outdoor: Optional[Literal["true", "false"]] = Query(None, description="–£–ª–∏—á–Ω–æ–µ"),
    page: int = Query(1, ge=1),
    limit: int = Query(10, ge=1, le=100),
):
    query = "SELECT * FROM plants WHERE 1=1"
    params: dict = {}

    # view
    if view:
        query += " AND LOWER(view) LIKE :view"
        params["view"] = f"%{view.lower()}%"

    # light ‚Äî OR –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º (—Ä—É—Å/–∞–Ω–≥–ª)
    if light:
        pats = LIGHT_PATTERNS.get(light, [])
        if pats:
            clauses = []
            for i, pat in enumerate(pats):
                key = f"light_{i}"
                clauses.append(f"LOWER(light) LIKE :{key}")
                params[key] = f"%{pat.lower()}%"
            query += " AND (" + " OR ".join(clauses) + ")"

    # beginner_friendly
    if beginner_friendly:
        query += " AND beginner_friendly = :bf"
        params["bf"] = (beginner_friendly == "–¥–∞")

    # toxicity
    if toxicity:
        tox_map = {"–Ω–µ—Ç": "none", "—É–º–µ—Ä–µ–Ω–Ω–æ": "mild", "—Ç–æ–∫—Å–∏—á–Ω–æ": "toxic"}
        query += " AND LOWER(toxicity) = :tox"
        params["tox"] = tox_map[toxicity]

    # temperature ‚Äî –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π LIKE
    if temperature:
        # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤–≤–æ–¥ –∫–∞–∫ –≤ SQL-–Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
        t = (
            temperature.lower()
            .replace("¬∞", "")
            .replace("c", "")
            .replace(" ", "")
            .replace("‚Äì", "-")
            .replace("‚Äî", "-")
        )
        query += f" AND {norm_temp_sql('temperature')} LIKE :temp"
        params["temp"] = f"%{t}%"

    # ru_regions
    if ru_regions:
        query += " AND LOWER(ru_regions) LIKE :region"
        params["region"] = f"%{ru_regions.lower()}%"

    # indoor / outdoor
    if indoor:
        query += " AND indoor = :indoor"
        params["indoor"] = (indoor == "true")
    if outdoor:
        query += " AND outdoor = :outdoor"
        params["outdoor"] = (outdoor == "true")

    # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ + –ø–∞–≥–∏–Ω–∞—Ü–∏—è
    query += " ORDER BY id"
    offset = (page - 1) * limit
    query += " LIMIT :limit OFFSET :offset"
    params["limit"] = limit
    params["offset"] = offset

    with engine.connect() as connection:
        result = connection.execute(text(query), params)
        plants = [dict(row._mapping) for row in result]

    return {"count": len(plants), "page": page, "limit": limit, "results": plants}

@app.get("/plant/{plant_id}", dependencies=[Depends(verify_api_key)])
def get_plant(plant_id: int):
    with engine.connect() as connection:
        row = connection.execute(text("SELECT * FROM plants WHERE id = :id"), {"id": plant_id}).fetchone()
        if not row:
            raise HTTPException(status_code=404, detail="Plant not found")
    return dict(row._mapping)

@app.get("/stats", dependencies=[Depends(verify_api_key)])
def get_stats():
    with engine.connect() as connection:
        row = connection.execute(text("""
            SELECT 
                COUNT(*) AS total,
                COUNT(DISTINCT view) AS unique_views,
                COUNT(DISTINCT family) AS unique_families,
                SUM(CASE WHEN toxicity = 'toxic' THEN 1 ELSE 0 END) AS toxic_count,
                SUM(CASE WHEN beginner_friendly = true THEN 1 ELSE 0 END) AS beginner_friendly_count
            FROM plants;
        """)).fetchone()
    return dict(row._mapping)

@app.get("/health", dependencies=[Depends(verify_api_key)])
def health_check():
    return {"status": "ok"}

# Swagger —Å X-API-Key
def custom_openapi():
    if app.openapi_schema:
        return app.openapi_schema
    schema = get_openapi(
        title="GreenCore API",
        version="1.3.0",
        description="–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã, –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è light/temperature, –∑–∞—â–∏—Ç–∞ –ø–æ X-API-Key",
        routes=app.routes,
    )
    schema.setdefault("components", {}).setdefault("securitySchemes", {})
    schema["components"]["securitySchemes"]["APIKeyHeader"] = {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-Key",
    }
    for path in schema["paths"]:
        for method in schema["paths"][path]:
            schema["paths"][path][method]["security"] = [{"APIKeyHeader": []}]
    app.openapi_schema = schema
    return app.openapi_schema

app.openapi = custom_openapi
